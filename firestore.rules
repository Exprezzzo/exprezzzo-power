rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() { return request.auth != null; }
    function isOwner(userId) { return request.auth.uid == userId; }
    function isSuperOwner() { return request.auth.token.role == 'super_owner'; }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }
    
    match /projects/{projectId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || request.auth.uid in resource.data.collaborators);
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
      allow update: if isAuthenticated() && (isOwner(resource.data.ownerId) || request.auth.uid in resource.data.collaborators);
      allow delete: if isAuthenticated() && isOwner(resource.data.ownerId);
    }

    match /agents/{agentId} {
      allow read: if isAuthenticated() && 
                 (isOwner(resource.data.ownerId) || 
                  (resource.data.isPublic == true) || 
                  (resource.data.sharedWith != null && request.auth.uid in resource.data.sharedWith) || 
                  isSuperOwner());
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
      allow update, delete: if isAuthenticated() && 
                            (isOwner(resource.data.ownerId) || 
                             isSuperOwner());
    }
    
    match /platforms/{platformId} {
      allow read: if isAuthenticated() && 
                 (isOwner(resource.data.ownerId) || 
                  (resource.data.isPublic == true) || 
                  (resource.data.collaborators != null && request.auth.uid in resource.data.collaborators) ||
                  isSuperOwner());
      allow create: if isAuthenticated() && isOwner(request.resource.data.ownerId);
      allow update: if isAuthenticated() && 
                    (isOwner(resource.data.ownerId) || 
                     (resource.data.collaborators != null && request.auth.uid in resource.data.collaborators) ||
                     isSuperOwner());
      allow delete: if isSuperOwner();
    }

    match /chats/{chatId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.ownerId) || request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated() && (isOwner(request.resource.data.ownerId) || request.auth.uid in request.resource.data.participants);
      allow update: if isAuthenticated() && (isOwner(resource.data.ownerId) || request.auth.uid in resource.data.participants);
      allow delete: if isAuthenticated() && isOwner(resource.data.ownerId);

      match /messages/{messageId} {
        allow read: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/chats/$(chatId)).ownerId) || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).participants);
        allow create: if isAuthenticated() && (isOwner(get(/databases/$(database)/documents/chats/$(chatId)).ownerId) || request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).participants);
        allow update: if false;
        allow delete: if isSuperOwner();
      }
    }
    
    match /files/{fileId} {
        allow read: if isAuthenticated() && isOwner(resource.data.userId);
        allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
        allow delete: if isAuthenticated() && isOwner(resource.data.userId);
        allow update: if false;
    }

    match /logs/{logId} {
      allow read: if isSuperOwner();
      allow create: if true;
      allow update, delete: if isSuperOwner();
    }
    
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperOwner());
      allow create: if isAuthenticated() && isOwner(request.resource.data.userId);
      allow update: if isAuthenticated() && (isOwner(resource.data.userId) || isSuperOwner());
      allow delete: if isAuthenticated() && isOwner(resource.data.userId) || isSuperOwner();
    }
    
    match /stripe_customers/{customerId} {
      allow read: if isOwner(userId) || isSuperOwner();
      allow create, update, delete: if false; 
    }
    match /stripe_subscriptions/{subscriptionId} {
      allow read: if isOwner(resource.data.customerId) || isSuperOwner();
      allow create, update, delete: if false;
    }
  }
}
